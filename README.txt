This is my final project for the Codecademy Pro Learn Python course
, and it is about as basic as it gets.  The program, written in Python 2.7.15, offers you the choice of two activities.    
	
In the first, it simply makes up and outputs quotes in the style of the German philosopher Friedrich Nietzsche.  The user is able to set some parameters, including the distinctive period of Nietzsche's works from which the material should be drawn, the number of passages to be generated, and the number of words per passage.  

The second is similar, but serves as a rudimentary game. Here, the user again inputs the number and length of the passages to be generated but, in this case, does not know and must make a (hopefully educated) guess about the period from which the raw material of which they are formed originates.  Correct answers earn points based on the number and length of the passages examined.  In a sense, the first activity can help familiarize the user with the works and style from each of the periods before accepting the challenge of the game.  

The project makes use of the Codecademy Markov Chain module, very slightly modified to enable the user to determine the length of the generated passage.  For the game portion, I also imported the sleep and randint functions from the time and random modules, respectively, the former to smooth out the amount of time required to obtain the data for the different periods and the latter to secretly determine from which period the material will be drawn.  Regardless of activity, the fetch_data module scrapes the material from the Project Gutenberg website(https://www.gutenberg.org).  Although the works there are already in the Plain Text format, I found that using the HTML parser in Beautiful Soup helped remove the few, but pretty jarring, additional characters/symbols in the passages generated, so, while probably not necessary, I decided to leave it in the program.  My experience in troubleshooting and debugging the program was that, with repeated uses, it gradually took longer and longer to scrape the data from the Project Gutenberg website (maybe to discourage people from repeatedly doing just that?).  That means that, especially over time, the values I passed to the sleep function might have to be adjusted, but I think the basic concept is correct.  The same goes for the scoring mechanism, though no doubt this could be tinkered with quite a bit. With respect to best practices, I don't know if I should have structed the code differently by defining more functions, but the way I did it seemed, and still seems, the cleanest way to me.  

Overall, I thought the whole final project idea was a good exercise.  I've seen some people take it in some pretty unusual directions, integrating all sorts of, to me, esoteric elements.  For me, it was mostly a matter of learning how to install and set up Python, Sublime Text and Git/Bash on my computer; familiarize myself with the various forms of documentation out there; write a crude program; and push it all to GitHub. In promoting all of that, I think the exercise was pretty worthwhile.      